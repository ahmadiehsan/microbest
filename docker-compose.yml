services:
  nginx:
    image: ${NGINX_IMAGE}
    hostname: ${NGINX_HOST}
    restart: on-failure
    volumes:
      - ${NGINX_CONFIG}:/etc/nginx/templates/default.conf.template
      - ${NGINX_ENTRYPOINT}:/etc/nginx/entrypoint.sh
    entrypoint: /etc/nginx/entrypoint.sh
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
    ports:
      - "${NGINX_PORT_PUBLIC}:${NGINX_PORT}"
    stop_grace_period: 0s

  otel_collector:
    image: ${OTEL_COLLECTOR_IMAGE}
    hostname: ${OTEL_COLLECTOR_HOST}
    restart: on-failure
    volumes:
      - ${OTEL_COLLECTOR_CONFIG}:/etc/otel_collector/config.yaml
    command:
      - --config=/etc/otel_collector/config.yaml
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
    ports:
      - "${OTEL_COLLECTOR_GRPC_PORT}"
      - "${OTEL_COLLECTOR_HTTP_PORT}"
    depends_on:
      - elasticsearch
      - prometheus
      - jaeger
    deploy:
      resources:
        limits:
          memory: 200M

  elasticsearch:
    image: ${ELASTICSEARCH_IMAGE}
    hostname: ${ELASTICSEARCH_HOST}
    restart: on-failure
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${ELASTICSEARCH_ENV_FILE}
    ports:
      - "${ELASTICSEARCH_PORT}"
    deploy:
      resources:
        limits:
          memory: 2G
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: curl -s http://127.0.0.1:${ELASTICSEARCH_PORT}/_cluster/health | grep -E '"status":"(green|yellow)"'
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 10

  kibana:
    image: ${KIBANA_IMAGE}
    hostname: ${KIBANA_HOST}
    restart: on-failure
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${KIBANA_ENV_FILE}
    ports:
      - "${KIBANA_PORT}"
    depends_on:
      - nginx
      - elasticsearch

  prometheus:
    image: ${PROMETHEUS_IMAGE}
    hostname: ${PROMETHEUS_HOST}
    restart: on-failure
    volumes:
      - ${PROMETHEUS_CONFIG}:/etc/prometheus/config.yaml
    command:
      - --config.file=/etc/prometheus/config.yaml
      - --web.enable-otlp-receiver
    ports:
      - "${PROMETHEUS_PORT}"
    deploy:
      resources:
        limits:
          memory: 300M

  grafana:
    image: ${GRAFANA_IMAGE}
    hostname: ${GRAFANA_HOST}
    restart: on-failure
    ports:
      - "${GRAFANA_PORT}"
    depends_on:
      - nginx
    deploy:
      resources:
        limits:
          memory: 120M

  jaeger:
    image: ${JAEGER_IMAGE}
    hostname: ${JAEGER_HOST}
    restart: on-failure
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${JAEGER_ENV_FILE}
    ports:
      - "${JAEGER_UI_PORT}"
      - "${JAEGER_OTEL_COLLECTOR_GRPC_PORT}"
    depends_on:
      - nginx
    deploy:
      resources:
        limits:
          memory: 1200M

  service_1:
    image: ${SERVICE_1_IMAGE}
    build: ${SERVICE_1_ROOT_DIR}
    hostname: ${SERVICE_1_HOST}
    restart: on-failure
    command: sh -c "/wait && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ${SERVICE_1_ROOT_DIR}:/app
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${SERVICE_1_ENV_FILE}
    ports:
      - "${SERVICE_1_PORT}"
    depends_on:
      - nginx
      - otel_collector

  service_2:
    image: ${SERVICE_2_IMAGE}
    build: ${SERVICE_2_ROOT_DIR}
    hostname: ${SERVICE_2_HOST}
    restart: on-failure
    command: sh -c "/wait && uvicorn fastapi_server:app --host 0.0.0.0 --reload --port 8000 --proxy-headers"
    volumes:
      - ${SERVICE_2_ROOT_DIR}:/app
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${SERVICE_2_ENV_FILE}
    ports:
      - "${SERVICE_2_PORT}"
    depends_on:
      - nginx
      - otel_collector
