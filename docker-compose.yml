services:
  otel_collector:
    image: ${OTEL_COLLECTOR_IMAGE}
    restart: on-failure
    volumes:
      - ${OTEL_COLLECTOR_CONFIG}:/etc/otel_collector/config.yaml
    command:
      - --config=/etc/otel_collector/config.yaml
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
    ports:
      - "${OTEL_COLLECTOR_GRPC_PORT}"
      - "${OTEL_COLLECTOR_HTTP_PORT}"
    depends_on:
      elasticsearch:
        condition: service_healthy
      prometheus:
        condition: service_started
      jaeger:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 200M

  elasticsearch:
    image: ${ELASTICSEARCH_IMAGE}
    restart: on-failure
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${ELASTICSEARCH_ENV_FILE}
    ports:
      - "${ELASTICSEARCH_PORT}"
    deploy:
      resources:
        limits:
          memory: 2G
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: curl -s http://localhost:${ELASTICSEARCH_PORT}/_cluster/health | grep -E '"status":"(green|yellow)"'
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 10

  kibana:
    image: ${KIBANA_IMAGE}
    restart: on-failure
    volumes:
      - kibana_data:/usr/share/kibana/data
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${KIBANA_ENV_FILE}
    ports:
      - "${KIBANA_PORT}:${KIBANA_PORT_HOST}"
    depends_on:
      - elasticsearch

  prometheus:
    image: ${PROMETHEUS_IMAGE}
    restart: on-failure
    volumes:
      - ${PROMETHEUS_CONFIG}:/etc/prometheus/config.yaml
    command:
      - --config.file=/etc/prometheus/config.yaml
      - --web.enable-otlp-receiver
    ports:
      - "${PROMETHEUS_PORT}"
    deploy:
      resources:
        limits:
          memory: 300M

  grafana:
    image: ${GRAFANA_IMAGE}
    restart: on-failure
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT_HOST}"
    deploy:
      resources:
        limits:
          memory: 120M

  jaeger:
    image: ${JAEGER_IMAGE}
    restart: on-failure
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${JAEGER_ENV_FILE}
    ports:
      - "${JAEGER_UI_PORT}:${JAEGER_UI_PORT_HOST}"
      - "${JAEGER_OTEL_COLLECTOR_GRPC_PORT}"
    deploy:
      resources:
        limits:
          memory: 1200M

  service_1:
    restart: on-failure
    build: ${SERVICE_1_ROOT_DIR}
    volumes:
      - ${SERVICE_1_ROOT_DIR}:/app
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${SERVICE_1_ENV_FILE}
    ports:
      - "${SERVICE_1_PORT}:${SERVICE_1_PORT_HOST}"
    depends_on:
      - otel_collector

  service_2:
    restart: on-failure
    build: ${SERVICE_2_ROOT_DIR}
    volumes:
      - ${SERVICE_2_ROOT_DIR}:/app
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${SERVICE_2_ENV_FILE}
    ports:
      - "${SERVICE_2_PORT}:${SERVICE_2_PORT_HOST}"
    depends_on:
      - otel_collector

volumes:
  kibana_data:
