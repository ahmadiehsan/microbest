# =========================
# Receivers (Input Methods)
# =====
receivers:
  otlp:
    protocols:
      grpc: # OpenTelemetry Collector accepts OTLP over gRPC
        endpoint: 0.0.0.0:${env:OTEL_COLLECTOR_GRPC_PORT}
      http: # OpenTelemetry Collector accepts OTLP over HTTP
        endpoint: 0.0.0.0:${env:OTEL_COLLECTOR_HTTP_PORT}

# =========================
# Exporters (Output Methods)
# =====
exporters:
  debug: # Log received inputs
  otlp: # Jaeger natively supports OTLP over gRPC
    endpoint: "${env:JAEGER_HOST}:${env:JAEGER_OTEL_GRPC_PORT}"
    tls:
      insecure: true
  otlphttp/prometheus: # Prometheus natively supports OTLP over HTTP
    endpoint: "http://${env:PROMETHEUS_HOST}:${env:PROMETHEUS_PORT}/api/v1/otlp"
    tls:
      insecure: true
  elasticsearch: # Elasticsearch doesn't natively support OTLP, but OpenTelemetry Collector uses Elasticsearch API
    endpoint: "http://${env:ELASTICSEARCH_HOST}:${env:ELASTICSEARCH_PORT}"

# =========================
# Processors (Data Manipulation)
# =====
processors:
  batch:
  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 25

connectors:
  spanmetrics:

# =========================
# Node Configuration
# =====
service:
  pipelines: # Logs/Traces/Metrics -> Receivers -> Processors -> Exporters -> Jaeger/Prometheus/Elasticsearch
    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: [elasticsearch, debug]
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: [otlp, debug, spanmetrics]
    metrics:
      receivers: [otlp, spanmetrics]
      processors: [memory_limiter, batch]
      exporters: [otlphttp/prometheus, debug]

  telemetry: # OpenTelemetry Collector's own logs and metrics (If we configure traces, it will create an infinite loop)
    logs:
      level: info # We don't need to send logs to Elasticsearch because console is enough
    metrics:
      level: detailed
      readers:
        - periodic:
            exporter:
              otlp:
                protocol: http/protobuf
                endpoint: ${env:OTEL_COLLECTOR_HOST}:${env:OTEL_COLLECTOR_HTTP_PORT}
