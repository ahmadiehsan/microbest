receivers:
  otlp:
    protocols:
      grpc:
        endpoint: ${env:OTEL_COLLECTOR_HOST}:${env:OTEL_COLLECTOR_GRPC_PORT}
      http:
        endpoint: ${env:OTEL_COLLECTOR_HOST}:${env:OTEL_COLLECTOR_HTTP_PORT}
        cors:
          allowed_origins:
            - "http://*"
            - "https://*"

exporters:
  debug:
  otlp:
    endpoint: "${env:JAEGER_HOST}:${env:JAEGER_OTEL_COLLECTOR_GRPC_PORT}"
    tls:
      insecure: true
  otlphttp/prometheus:
    endpoint: "http://${env:PROMETHEUS_HOST}:${env:PROMETHEUS_PORT}/api/v1/otlp"
    tls:
      insecure: true
  elasticsearch:
    endpoint: "http://${env:ELASTICSEARCH_HOST}:${env:ELASTICSEARCH_PORT}"

processors:
  batch:
  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 25

connectors:
  spanmetrics:

service:
  pipelines:
    traces:
      receivers: [ otlp ]
      processors: [ memory_limiter, batch ]
      exporters: [ otlp, debug, spanmetrics ]
    metrics:
      receivers: [ otlp, spanmetrics ]
      processors: [ memory_limiter, batch ]
      exporters: [ otlphttp/prometheus, debug ]
    logs:
      receivers: [ otlp ]
      processors: [ memory_limiter, batch ]
      exporters: [ elasticsearch, debug ]

  telemetry:
    metrics:
      level: detailed
      readers:
        - periodic:
            interval: 10000
            timeout: 5000
            exporter:
              otlp:
                protocol: grpc
                endpoint: ${env:OTEL_COLLECTOR_HOST}:${env:OTEL_COLLECTOR_GRPC_PORT}
