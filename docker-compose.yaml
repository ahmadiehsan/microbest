services:
  nginx:
    image: ${NGINX_IMAGE}
    hostname: ${NGINX_HOST}
    volumes:
      - ${NGINX_CONFIG}:/etc/nginx/templates/default.conf.template:ro
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
    ports:
      - "${NGINX_PORT_PUBLIC}:${NGINX_PORT}"

  kong:
    image: ${KONG_IMAGE}
    hostname: ${KONG_HOST}
    user: root
    volumes:
      - ${KONG_CONFIG}:/etc/config.yaml.template:ro
      - ${KONG_ENTRYPOINT}:/etc/entrypoint.sh:ro
      - ${DOCKER_COMPOSE_WAIT}:/etc/wait:ro
    entrypoint: /etc/entrypoint.sh
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${KONG_ENV_FILE}
    ports:
      - "${KONG_PORT}"
    depends_on:
      - nginx

  otel_collector:
    image: ${OTEL_COLLECTOR_IMAGE}
    hostname: ${OTEL_COLLECTOR_HOST}
    volumes:
      - ${OTEL_COLLECTOR_CONFIG}:/etc/otelcol-contrib/config.yaml:ro
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
    ports:
      - "${OTEL_COLLECTOR_GRPC_PORT}"
      - "${OTEL_COLLECTOR_HTTP_PORT}"
    depends_on:
      - elasticsearch
      - prometheus
      - jaeger

  elasticsearch:
    image: ${ELASTICSEARCH_IMAGE}
    hostname: ${ELASTICSEARCH_HOST}
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${ELASTICSEARCH_ENV_FILE}
    ports:
      - "${ELASTICSEARCH_PORT}"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: curl -s http://127.0.0.1:${ELASTICSEARCH_PORT}/_cluster/health | grep -E '"status":"(green|yellow)"'
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 10

  kibana:
    image: ${KIBANA_IMAGE}
    hostname: ${KIBANA_HOST}
    volumes:
      - kibana_data:/usr/share/kibana/data
      - ${KIBANA_PROVISIONING}:/etc/provisioning:ro
      - ${KIBANA_ENTRYPOINT}:/etc/entrypoint.sh:ro
      - ${DOCKER_COMPOSE_WAIT}:/etc/wait:ro
    entrypoint: /etc/entrypoint.sh
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${KIBANA_ENV_FILE}
    ports:
      - "${KIBANA_PORT}"
    depends_on:
      - kong
      - elasticsearch

  prometheus:
    image: ${PROMETHEUS_IMAGE}
    hostname: ${PROMETHEUS_HOST}
    volumes:
      - prometheus_data:/prometheus
      - ${PROMETHEUS_CONFIG}:/etc/prometheus/prometheus.yml:ro
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
    command:
      - --config.file=/etc/prometheus/prometheus.yml # default of image
      - --storage.tsdb.path=/prometheus # default of image
      - --web.enable-otlp-receiver
    ports:
      - "${PROMETHEUS_PORT}"

  grafana:
    image: ${GRAFANA_IMAGE}
    hostname: ${GRAFANA_HOST}
    volumes:
      - grafana_data:/var/lib/grafana
      - ${GRAFANA_CONFIG}:/etc/grafana/grafana.ini:ro
      - ${GRAFANA_PROVISIONING}:/etc/grafana/provisioning:ro
      - ${GRAFANA_ENTRYPOINT}:/etc/entrypoint.sh:ro
      - ${DOCKER_COMPOSE_WAIT}:/etc/wait:ro
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${GRAFANA_ENV_FILE}
    entrypoint: /etc/entrypoint.sh
    ports:
      - "${GRAFANA_PORT}"
    depends_on:
      - kong
      - prometheus
      - jaeger
      - elasticsearch

  jaeger:
    image: ${JAEGER_IMAGE}
    hostname: ${JAEGER_HOST}
    volumes:
      - ${JAEGER_ENTRYPOINT}:/etc/entrypoint.sh:ro
      - ${DOCKER_COMPOSE_WAIT}:/etc/wait:ro
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${JAEGER_ENV_FILE}
    entrypoint: /etc/entrypoint.sh
    ports:
      - "${JAEGER_UI_PORT}"
      - "${JAEGER_OTEL_GRPC_PORT}"
    depends_on:
      - kong
      - elasticsearch
      - prometheus

  kafka:
    image: ${KAFKA_IMAGE}
    hostname: ${KAFKA_HOST}
    volumes:
      - kafka_data:/var/lib/kafka/data
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${KAFKA_ENV_FILE}
    ports:
      - "${KAFKA_BROKER_PORT}"
      - "${KAFKA_CONTROLLER_PORT}"
    healthcheck:
      test: nc -z kafka ${KAFKA_BROKER_PORT}
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 10

  service_1:
    image: ${SERVICE_1_IMAGE}
    hostname: ${SERVICE_1_HOST}
    volumes:
      - ${SERVICE_1_CONFIG}:/etc/supervisord.conf:ro
      - ${SERVICE_1_ENTRYPOINT}:/etc/entrypoint.sh:ro
      - ${DOCKER_COMPOSE_WAIT}:/etc/wait:ro
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${SERVICE_1_ENV_FILE}
    entrypoint: /etc/entrypoint.sh
    ports:
      - "${SERVICE_1_PORT}"
    depends_on:
      - kong
      - otel_collector
      - kafka
      - service_2

  service_2:
    image: ${SERVICE_2_IMAGE}
    hostname: ${SERVICE_2_HOST}
    volumes:
      - ${SERVICE_2_CONFIG}:/etc/supervisord.conf:ro
      - ${SERVICE_2_ENTRYPOINT}:/etc/entrypoint.sh:ro
      - ${DOCKER_COMPOSE_WAIT}:/etc/wait:ro
    env_file:
      - ${DOCKER_COMPOSE_ENV_FILE}
      - ${SERVICE_2_ENV_FILE}
    entrypoint: /etc/entrypoint.sh
    ports:
      - "${SERVICE_2_HTTP_PORT}"
      - "${SERVICE_2_GRPC_PORT}"
    depends_on:
      - kong
      - otel_collector
      - kafka

volumes:
  elasticsearch_data:
  kibana_data:
  prometheus_data:
  grafana_data:
  kafka_data:
